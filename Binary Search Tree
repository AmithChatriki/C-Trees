#include<stdio.h>
#include<stdlib.h>
struct node
{
   struct node *llink;
   int info;
   struct node *rlink;
};
typedef struct node nd;
void inorder(nd *r) 
{
   if(r)
   {
      inorder(r->llink);
      printf("%d ",r->info);
      inorder(r->rlink);
   }
}
nd *insert(nd *root,int key)
{
   nd *cur=root, *prev=0;
   nd *t= (nd *) malloc(sizeof(nd));
   t->info=key; t->llink=t->rlink=0;
   if(!cur)
      return t;
   while(cur)
   {
      if(t->info == cur->info)
      {
         printf("Redundancy\n");
         free(t);
         return root;
      }
      prev=cur;
      if(t->info < cur->info)
         cur=cur->llink;
      else
         cur=cur->rlink;
   }
   if(t->info < prev->info)
      prev->llink=t;
   else
      prev->rlink=t;
   return root;
}
void iterSearch(nd *root,int key)
{
   if(!root)
   {
      printf("BST empty\n");
      return;
   }
   while(root)
   {
      if(key == root->info)
      {
         printf("Search successful\n"); 
         return;
      }
      if(key < root->info)
          root=root->llink;
      else
          root=root->rlink;
   }
   printf("Unsuccessful search\n");
}
void recurSearch(nd *root,int key)
{
   if(!root)
   {
     printf("Unsuccessful search\n"); 
     return;
   }
   if(key == root->info)
   {
      printf("Successful search\n");
      return;
   }
   if(key < root->info)
      return recurSearch(root->llink,key);
   return recurSearch(root->rlink,key);
}
int main()
{
   nd *root=0;
   int ch,i,key;
   FILE *fp;
   fp=fopen("data1","r");
   if(fp==0)
   {
      printf("File Open Unsuccessfull!\n");
      exit(0);
   }
   for(;;)
   {
       printf("\n1. Insert\n2. Iterative Search\n3. Recursive Search\n");
       printf("4. Inorder\n5. Delete a node\n6. Exit\n");
       printf("Enter choice = ");
       scanf("%d",&ch);
       switch(ch)
       {
           case 1: fscanf(fp,"%d",&ch);
                   for(i=0;i<ch;i++)
                   {
                      fscanf(fp,"%d",&key);
                      root=insert(root,key);
                   }
                   break;
           case 2: printf("Enter the information to be searched = ");
                   scanf("%d",&key);
                   iterSearch(root,key);
                   break;
           case 3: printf("Enter the information to be searched = ");
                   scanf("%d",&key);
                   recurSearch(root,key);
                   break;
           case 4: inorder(root);
                   break;
           case 5: printf("Enter information to be deleted\n");
                   scanf("%d",&ch);
                   //root = deletenode(root, ch);
                   break;
           case 6: return 0;
       }
  }
}
/*
data1
10 100 50 200 20 90 80 70 75 72 76
*/
