#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
#define MALLOC(p,s)\
        if(!(p=malloc(s)))\
        {\
          printf("Insufficient Memory\n");\
          exit(0);\
        }
struct node
{
   struct node *llink;
   char info;
   struct node *rlink;
};
typedef struct node nd;
nd *create(char *postfix)
{
   nd *temp,*st[20];
   int i,top=-1;
   for(i=0;postfix[i]!='\0';i++)
   {
      MALLOC(temp,sizeof(struct node));
      temp->info = postfix[i];
      temp->rlink=temp->llink=0;

      if(isalnum(postfix[i]))
         st[++top] = temp;
      else
      {
         temp->rlink = st[top--];
         temp->llink = st[top--];
         st[++top] = temp;
      }
    }
    return st[top--];
}
void preorder(nd *r)
{
   if(r)
   {
      printf("%c ",r->info);
      preorder(r->llink);
      preorder(r->rlink);
   }
}
void inorder(nd *r)
{
   if(r)
   {
      inorder(r->llink);
      printf("%c ",r->info);
      inorder(r->rlink);
   }   
}
void postorder(nd *r)
{
   if(r)
   {
      postorder(r->llink);
      postorder(r->rlink);
      printf("%c ",r->info);
   }   
}
int main()
{
   nd *root;
   char postfix[] = {"632-5*+2^3+"};
   root = create(postfix);

   printf("Inorder Traversal of Expression Tree = ");
   inorder(root);
   printf("\n");
   
   printf("Preorder Traversal of Expression Tree = ");
   preorder(root);
   printf("\n");

   printf("Postorder Traversal of Expression Tree = ");
   postorder(root);
   printf("\n");

   return 0;
}
